{:namespaces
 ({:source-url nil,
   :wiki-url "im4clj.commands-api.html",
   :name "im4clj.commands",
   :author "Kevin Neaton",
   :doc "Command fn's"}
  {:source-url nil,
   :wiki-url "im4clj.config-api.html",
   :name "im4clj.config",
   :author "Kevin Neaton",
   :doc "Configure im4clj"}
  {:source-url nil,
   :wiki-url "im4clj.core-api.html",
   :name "im4clj.core",
   :author "Kevin Neaton",
   :doc "ImageMagick for Clojure."}
  {:source-url nil,
   :wiki-url "im4clj.geometry-api.html",
   :name "im4clj.geometry",
   :author "Kevin Neaton",
   :doc
   "Functions used to generate and validate ImageMagick geometry spec strings."}
  {:source-url nil,
   :wiki-url "im4clj.im4java-api.html",
   :name "im4clj.im4java",
   :author "Kevin Neaton",
   :doc
   "Wrapper functions and utils for running shell commands with im4java."}
  {:source-url nil,
   :wiki-url "im4clj.options-api.html",
   :name "im4clj.options",
   :author "Kevin Neaton",
   :doc "Namespace used to generate option fn's"}
  {:source-url nil,
   :wiki-url "im4clj.run-api.html",
   :name "im4clj.run",
   :author "Kevin Neaton",
   :doc "Stringify and run commands via im4java."}
  {:source-url nil,
   :wiki-url "im4clj.util.log-api.html",
   :name "im4clj.util.log",
   :author "Kevin Neaton",
   :doc "Basic logging util's"}
  {:source-url nil,
   :wiki-url "im4clj.util.ns-api.html",
   :name "im4clj.util.ns",
   :doc "Namespace utilities"}),
 :vars
 ({:arglists ([cmd]),
   :name "command",
   :namespace "im4clj.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.commands-api.html#im4clj.commands/command",
   :doc
   "Build a new command. Prepends \"gm\" to the command if (use-gm?) is true.\n\n Example Usage:\n\n (command :convert)\n (command 'convert)\n (command \"convert\")\n",
   :var-type "function",
   :line 14,
   :file "src/im4clj/commands.clj"}
  {:arglists ([& opts]),
   :name "convert",
   :namespace "im4clj.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.commands-api.html#im4clj.commands/convert",
   :doc
   "Run a convert command with the given options.\n\n Example Usage:\n\n (convert \"input.jpg\" (resize 640 480) \"output.jpg\")\n",
   :var-type "function",
   :line 27,
   :file "src/im4clj/commands.clj"}
  {:arglists ([]),
   :name "use-gm",
   :namespace "im4clj.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.config-api.html#im4clj.config/use-gm",
   :doc "Get the thread-local value of *use-gm*.",
   :var-type "function",
   :line 15,
   :file "src/im4clj/config.clj"}
  {:arglists ([] [bool]),
   :name "use-gm!",
   :namespace "im4clj.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.config-api.html#im4clj.config/use-gm!",
   :doc "Set the thread-local value of *use-gm*.",
   :var-type "function",
   :line 19,
   :file "src/im4clj/config.clj"}
  {:arglists ([]),
   :name "use-gm?",
   :namespace "im4clj.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.config-api.html#im4clj.config/use-gm?",
   :doc
   "Predicate. Returns true if *use-gm* is bound to true. Use with-gm and with-im\nfor binding.",
   :var-type "function",
   :line 24,
   :file "src/im4clj/config.clj"}
  {:arglists ([& body]),
   :name "with-gm",
   :namespace "im4clj.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.config-api.html#im4clj.config/with-gm",
   :doc "Evaluates 'body' with *use-gm* bound to true.",
   :var-type "macro",
   :line 29,
   :file "src/im4clj/config.clj"}
  {:arglists ([& body]),
   :name "with-im",
   :namespace "im4clj.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.config-api.html#im4clj.config/with-im",
   :doc "Evaluates 'body' with *use-gm* bound to false.",
   :var-type "macro",
   :line 35,
   :file "src/im4clj/config.clj"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/border",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([width height]),
   :doc
   "Returns a new border option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "border"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/bordercolor",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([color]),
   :doc
   "Returns a new bordercolor option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "bordercolor"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/borderwidth",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([width height [offset-x offset-y] ? special?]),
   :doc
   "Returns a new borderwidth option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "borderwidth"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/colorspace",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new colorspace option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "colorspace"}
  {:arglists ([cmd]),
   :name "command",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/command",
   :doc
   "Build a new command. Prepends \"gm\" to the command if (use-gm?) is true.\n\n Example Usage:\n\n (command :convert)\n (command 'convert)\n (command \"convert\")\n",
   :var-type "function",
   :line 14,
   :file "src/im4clj/commands.clj"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/contrast",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new contrast option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "contrast"}
  {:arglists ([& opts]),
   :name "convert",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/convert",
   :doc
   "Run a convert command with the given options.\n\n Example Usage:\n\n (convert \"input.jpg\" (resize 640 480) \"output.jpg\")\n",
   :var-type "function",
   :line 27,
   :file "src/im4clj/commands.clj"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/crop",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([width height [offset-x offset-y] ? special?]),
   :doc
   "Returns a new crop option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "crop"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/define",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([key] [key value]),
   :doc
   "Returns a new define option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "define"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/depth",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new depth option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "depth"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/draw",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([string]),
   :doc
   "Returns a new draw option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "draw"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/flip",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new flip option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "flip"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/flop",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new flop option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "flop"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/font",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([name]),
   :doc
   "Returns a new font option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "font"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/gaussian",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([radius] [radius sigma]),
   :doc
   "Returns a new gaussian option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "gaussian"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/intent",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([type]),
   :doc
   "Returns a new intent option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "intent"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/limit",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([type value]),
   :doc
   "Returns a new limit option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "limit"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/quality",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new quality option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "quality"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/resize",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([width] [width height]),
   :doc
   "Returns a new resize option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nresize an image.",
   :name "resize"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/rotate",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([degrees]),
   :doc
   "Returns a new rotate option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "rotate"}
  {:arglists ([cmd & opts]),
   :name "run",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/run",
   :doc
   "Run a command by name with the given opts. Accepts any 'stringify-able'\n type. Does not check (use-gm?).\n\n Prefer pre-defined commands e.g. im4clj.core/convert.\n\n Example Usage:\n\n (run :convert \"input.jpg\" :resize 100 \"output.jpg\")\n (run [:gm :convert] \"input.jpg\" :resize 100 \"output.jpg\")\n",
   :var-type "function",
   :line 32,
   :file "src/im4clj/run.clj"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/sharpen",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([radius] [radius sigma]),
   :doc
   "Returns a new sharpen option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "sharpen"}
  {:arglists ([& args]),
   :name "stringify",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/stringify",
   :doc
   "Convert args to a flat sequence of strings.\n\nTODO: define stringify method for core types and move flatten to appropriate\nmethods.",
   :var-type "function",
   :line 22,
   :file "src/im4clj/run.clj"}
  {:file "src/im4clj/run.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/stringify-method",
   :namespace "im4clj.core",
   :line 14,
   :var-type "var",
   :doc "Method used by im4clj.core/stringify.",
   :name "stringify-method"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/text-font",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([name]),
   :doc
   "Returns a new text-font option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "text-font"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/unsharp",
   :namespace "im4clj.core",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new unsharp option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "unsharp"}
  {:arglists ([]),
   :name "use-gm",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/use-gm",
   :doc "Get the thread-local value of *use-gm*.",
   :var-type "function",
   :line 15,
   :file "src/im4clj/config.clj"}
  {:arglists ([] [bool]),
   :name "use-gm!",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/use-gm!",
   :doc "Set the thread-local value of *use-gm*.",
   :var-type "function",
   :line 19,
   :file "src/im4clj/config.clj"}
  {:arglists ([]),
   :name "use-gm?",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/use-gm?",
   :doc
   "Predicate. Returns true if *use-gm* is bound to true. Use with-gm and with-im\nfor binding.",
   :var-type "function",
   :line 24,
   :file "src/im4clj/config.clj"}
  {:arglists ([& body]),
   :name "with-gm",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/with-gm",
   :doc "Evaluates 'body' with *use-gm* bound to true.",
   :var-type "macro",
   :line 29,
   :file "src/im4clj/config.clj"}
  {:arglists ([& body]),
   :name "with-im",
   :namespace "im4clj.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.core-api.html#im4clj.core/with-im",
   :doc "Evaluates 'body' with *use-gm* bound to false.",
   :var-type "macro",
   :line 35,
   :file "src/im4clj/config.clj"}
  {:arglists ([w] [w h] [w h s] [w h x y] [w h x y s]),
   :name "geometry-spec",
   :namespace "im4clj.geometry",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.geometry-api.html#im4clj.geometry/geometry-spec",
   :doc "Image size and offset.",
   :var-type "function",
   :line 51,
   :file "src/im4clj/geometry.clj"}
  {:arglists ([x y]),
   :name "offset",
   :namespace "im4clj.geometry",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.geometry-api.html#im4clj.geometry/offset",
   :doc "Specify the image offset in pixels from top left.",
   :var-type "function",
   :line 28,
   :file "src/im4clj/geometry.clj"}
  {:arglists ([n]),
   :name "signed-string",
   :namespace "im4clj.geometry",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.geometry-api.html#im4clj.geometry/signed-string",
   :doc "Converts an integer to a signed string.",
   :var-type "function",
   :line 13,
   :file "src/im4clj/geometry.clj"}
  {:arglists ([w] [w h] [w h s]),
   :name "size",
   :namespace "im4clj.geometry",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.geometry-api.html#im4clj.geometry/size",
   :doc "Specify the image width and height in pixels or percentages.",
   :var-type "function",
   :line 22,
   :file "src/im4clj/geometry.clj"}
  {:arglists ([c]),
   :name "special-char?",
   :namespace "im4clj.geometry",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.geometry-api.html#im4clj.geometry/special-char?",
   :doc
   "Predicate. Determines whether or not c is a special character, or a string\nbegining with a special character. :see-also special-chars.",
   :var-type "function",
   :line 36,
   :file "src/im4clj/geometry.clj"}
  {:arglists ([cmd & more]),
   :name "command",
   :namespace "im4clj.im4java",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.im4java-api.html#im4clj.im4java/command",
   :doc
   "Create and return a new im4java ImageCommand from the string(s) provided.",
   :var-type "function",
   :line 30,
   :file "src/im4clj/im4java.clj"}
  {:arglists ([& opt-strs]),
   :name "operation",
   :namespace "im4clj.im4java",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.im4java-api.html#im4clj.im4java/operation",
   :doc
   "Create and return a new im4java Operation from the string(s) provided.",
   :var-type "function",
   :line 37,
   :file "src/im4clj/im4java.clj"}
  {:arglists ([cmd & op]),
   :name "run",
   :namespace "im4clj.im4java",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.im4java-api.html#im4clj.im4java/run",
   :doc
   "Create and run an im4java ImageCommand from the string(s) provided.\n\nExample Usage:\n\n(run \"convert\" \"input.jpg\" \"resize\" \"100\" \"output.jpg\")",
   :var-type "function",
   :line 50,
   :file "src/im4clj/im4java.clj"}
  {:arglists ([]),
   :name "search-path",
   :namespace "im4clj.im4java",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.im4java-api.html#im4clj.im4java/search-path",
   :doc "Get the system search path used by im4java.",
   :var-type "function",
   :line 19,
   :file "src/im4clj/im4java.clj"}
  {:arglists ([path]),
   :name "search-path!",
   :namespace "im4clj.im4java",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.im4java-api.html#im4clj.im4java/search-path!",
   :doc "Set the system search path used by im4java.",
   :var-type "function",
   :line 23,
   :file "src/im4clj/im4java.clj"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/border",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([width height]),
   :doc
   "Returns a new border option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "border"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/bordercolor",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([color]),
   :doc
   "Returns a new bordercolor option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "bordercolor"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/borderwidth",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([width height [offset-x offset-y] ? special?]),
   :doc
   "Returns a new borderwidth option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "borderwidth"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/colorspace",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new colorspace option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "colorspace"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/contrast",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new contrast option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "contrast"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/crop",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([width height [offset-x offset-y] ? special?]),
   :doc
   "Returns a new crop option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "crop"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/define",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([key] [key value]),
   :doc
   "Returns a new define option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "define"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/depth",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new depth option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "depth"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/draw",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([string]),
   :doc
   "Returns a new draw option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "draw"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/flip",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new flip option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "flip"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/flop",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new flop option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "flop"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/font",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([name]),
   :doc
   "Returns a new font option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "font"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/gaussian",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([radius] [radius sigma]),
   :doc
   "Returns a new gaussian option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "gaussian"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/intent",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([type]),
   :doc
   "Returns a new intent option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "intent"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/limit",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([type value]),
   :doc
   "Returns a new limit option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "limit"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/quality",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([value]),
   :doc
   "Returns a new quality option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "quality"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/resize",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([width] [width height]),
   :doc
   "Returns a new resize option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nresize an image.",
   :name "resize"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/rotate",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([degrees]),
   :doc
   "Returns a new rotate option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "rotate"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/sharpen",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([radius] [radius sigma]),
   :doc
   "Returns a new sharpen option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "sharpen"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/text-font",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([name]),
   :doc
   "Returns a new text-font option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "text-font"}
  {:file "src/im4clj/options.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/im4clj.options-api.html#im4clj.options/unsharp",
   :namespace "im4clj.options",
   :var-type "function",
   :arglists ([]),
   :doc
   "Returns a new unsharp option for ImageMagick/GraphicsMagick. See IM/GM documentation.\n\nTODO: add docstring.",
   :name "unsharp"}
  {:arglists ([cmd & opts]),
   :name "run",
   :namespace "im4clj.run",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.run-api.html#im4clj.run/run",
   :doc
   "Run a command by name with the given opts. Accepts any 'stringify-able'\n type. Does not check (use-gm?).\n\n Prefer pre-defined commands e.g. im4clj.core/convert.\n\n Example Usage:\n\n (run :convert \"input.jpg\" :resize 100 \"output.jpg\")\n (run [:gm :convert] \"input.jpg\" :resize 100 \"output.jpg\")\n",
   :var-type "function",
   :line 32,
   :file "src/im4clj/run.clj"}
  {:arglists ([& args]),
   :name "stringify",
   :namespace "im4clj.run",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.run-api.html#im4clj.run/stringify",
   :doc
   "Convert args to a flat sequence of strings.\n\nTODO: define stringify method for core types and move flatten to appropriate\nmethods.",
   :var-type "function",
   :line 22,
   :file "src/im4clj/run.clj"}
  {:arglists ([msg & form]),
   :name "debug",
   :namespace "im4clj.util.log",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.util.log-api.html#im4clj.util.log/debug",
   :doc "Print a debug message to *out* when *debug* is true.",
   :var-type "function",
   :line 15,
   :file "src/im4clj/util/log.clj"}
  {:arglists ([msg]),
   :name "progress",
   :namespace "im4clj.util.log",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.util.log-api.html#im4clj.util.log/progress",
   :doc
   "Print a progress message to *out* when *report-progress* is true.",
   :var-type "function",
   :line 30,
   :file "src/im4clj/util/log.clj"}
  {:arglists ([& body]),
   :name "with-debug",
   :namespace "im4clj.util.log",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.util.log-api.html#im4clj.util.log/with-debug",
   :doc "Print debug messages.",
   :var-type "macro",
   :line 22,
   :file "src/im4clj/util/log.clj"}
  {:arglists ([& body]),
   :name "with-progress",
   :namespace "im4clj.util.log",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.util.log-api.html#im4clj.util.log/with-progress",
   :doc "Report progress.",
   :var-type "macro",
   :line 36,
   :file "src/im4clj/util/log.clj"}
  {:arglists ([& ns-names]),
   :name "immigrate",
   :namespace "im4clj.util.ns",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/im4clj.util.ns-api.html#im4clj.util.ns/immigrate",
   :doc
   "Create a public var in this namespace for each public var in the\nnamespaces named by ns-names. The created vars have the same name, value\nand metadata as the original except that their :ns metadata value is this\nnamespace.",
   :var-type "function",
   :line 4,
   :file "src/im4clj/util/ns.clj"})}
